warning: in the working copy of 'server/src/auth/auth.service.ts', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/server/src/auth/auth.service.ts b/server/src/auth/auth.service.ts[m
[1mindex 1b0173f..e8a8b2f 100644[m
[1m--- a/server/src/auth/auth.service.ts[m
[1m+++ b/server/src/auth/auth.service.ts[m
[36m@@ -1,11 +1,13 @@[m
[31m-import { Injectable, UnauthorizedException } from '@nestjs/common';[m
[32m+[m[32mimport { Injectable, UnauthorizedException, BadRequestException, NotFoundException } from '@nestjs/common';[m
 import { JwtService } from '@nestjs/jwt';[m
 import { InjectModel } from '@nestjs/mongoose';[m
 import { Model } from 'mongoose';[m
 import { LoginDto } from './dto/login.dto';[m
 import { UsuarioAdmin } from '../admins/entities/usuario-admin.schema';[m
 import { SaasCompany } from '../products/entities/product.schema';[m
[32m+[m[32mimport { MailService } from '../common/mail.service';[m
 import * as bcrypt from 'bcryptjs';[m
[32m+[m[32mimport * as crypto from 'crypto';[m
 [m
 @Injectable()[m
 export class AuthService {[m
[36m@@ -13,6 +15,7 @@[m [mexport class AuthService {[m
     private jwtService: JwtService,[m
     @InjectModel(UsuarioAdmin.name) private usuarioAdminModel: Model<UsuarioAdmin>,[m
     @InjectModel(SaasCompany.name) private saasCompanyModel: Model<SaasCompany>,[m
[32m+[m[32m    private mailService: MailService,[m
   ) {}[m
 [m
   async loginAdmin(loginDto: LoginDto) {[m
[36m@@ -129,4 +132,76 @@[m [mexport class AuthService {[m
       }[m
     };[m
   }[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * üìß Solicitar recupera√ß√£o de senha[m
[32m+[m[32m   */[m
[32m+[m[32m  async requestPasswordReset(email: string) {[m
[32m+[m[32m    const saasCompany = await this.saasCompanyModel.findOne({[m[41m [m
[32m+[m[32m      email: email.toLowerCase()[m[41m [m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // Verificar se email existe[m
[32m+[m[32m    if (!saasCompany) {[m
[32m+[m[32m      throw new NotFoundException('Email n√£o cadastrado em nosso sistema');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Gerar token √∫nico de 32 bytes[m
[32m+[m[32m    const resetToken = crypto.randomBytes(32).toString('hex');[m
[32m+[m[32m    const resetExpires = new Date(Date.now() + 3600000); // 1 hora[m
[32m+[m
[32m+[m[32m    // Salvar token no banco[m
[32m+[m[32m    saasCompany.passwordResetToken = resetToken;[m
[32m+[m[32m    saasCompany.passwordResetExpires = resetExpires;[m
[32m+[m[32m    await saasCompany.save();[m
[32m+[m
[32m+[m[32m    // Enviar email[m
[32m+[m[32m    try {[m
[32m+[m[32m      await this.mailService.sendPasswordResetEmail(saasCompany.email as string, resetToken);[m
[32m+[m[32m      console.log(`[AUTH] ‚úÖ Email de recupera√ß√£o enviado para: ${saasCompany.email}`);[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error('[AUTH] ‚ùå Erro ao enviar email:', error.message);[m
[32m+[m[32m      // Continuar mesmo se falhar (n√£o revelar erro)[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      success: true,[m
[32m+[m[32m      message: 'Instru√ß√µes para redefinir sua senha foram enviadas para seu email'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * üîê Redefinir senha com token[m
[32m+[m[32m   */[m
[32m+[m[32m  async resetPassword(token: string, newPassword: string) {[m
[32m+[m[32m    if (!newPassword || newPassword.length < 6) {[m
[32m+[m[32m      throw new BadRequestException('Senha deve ter no m√≠nimo 6 caracteres');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Buscar empresa com o token v√°lido[m
[32m+[m[32m    const saasCompany = await this.saasCompanyModel.findOne({[m
[32m+[m[32m      passwordResetToken: token,[m
[32m+[m[32m      passwordResetExpires: { $gt: new Date() }[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    if (!saasCompany) {[m
[32m+[m[32m      throw new BadRequestException('Token inv√°lido ou expirado');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Hash da nova senha[m
[32m+[m[32m    const hashedPassword = await bcrypt.hash(newPassword, 10);[m
[32m+[m
[32m+[m[32m    // Atualizar senha e limpar token[m
[32m+[m[32m    saasCompany.password = hashedPassword;[m
[32m+[m[32m    saasCompany.passwordResetToken = undefined;[m
[32m+[m[32m    saasCompany.passwordResetExpires = undefined;[m
[32m+[m[32m    await saasCompany.save();[m
[32m+[m
[32m+[m[32m    console.log(`[AUTH] ‚úÖ Senha redefinida para: ${saasCompany.email}`);[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      success: true,[m
[32m+[m[32m      message: 'Senha redefinida com sucesso'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
 } [m
\ No newline at end of file[m
