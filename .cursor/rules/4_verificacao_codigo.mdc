# REGRAS DE VERIFICA√á√ÉO DE C√ìDIGO - ANTI-ALUCINA√á√ÉO

## üö´ PROIBI√á√ïES ABSOLUTAS

### NUNCA FA√áA SEM VERIFICAR:
- **Sugerir bibliotecas** sem verificar package.json
- **Propor refatora√ß√µes** sem ler o c√≥digo atual
- **Assumir padr√µes** n√£o implementados no projeto
- **Criar funcionalidades** sem entender o contexto existente
- **Modificar arquivos** sem verificar depend√™ncias

## ‚úÖ VERIFICA√á√ïES OBRIGAT√ìRIAS

### ANTES DE QUALQUER SUGEST√ÉO:
1. **Estrutura do Projeto:**
   - Use `list_dir` para entender organiza√ß√£o de pastas
   - Identifique padr√µes de nomenclatura existentes
   - Entenda a arquitetura implementada

2. **Arquivos Relevantes:**
   - Use `file_search` para encontrar implementa√ß√µes similares
   - Use `grep_search` para verificar padr√µes existentes
   - Leia pelo menos 3-5 arquivos relacionados

3. **Depend√™ncias:**
   - Verifique package.json do projeto
   - Confirme vers√µes das bibliotecas
   - N√£o sugira bibliotecas n√£o instaladas

4. **C√≥digo Existente:**
   - Use `read_file` para entender implementa√ß√µes
   - Identifique padr√µes de c√≥digo usados
   - Entenda a l√≥gica de neg√≥cio implementada

## üîç COMANDOS DE VERIFICA√á√ÉO OBRIGAT√ìRIOS

### Para Frontend:
```bash
# Verificar estrutura de pastas
list_dir relative_workspace_path="client"

# Buscar arquivos relacionados
file_search query="dashboard"

# Verificar implementa√ß√µes existentes
grep_search query="function.*dashboard"

# Ler c√≥digo relevante
read_file target_file="client/js/dashboard.js" should_read_entire_file=false start_line_one_indexed=1 end_line_one_indexed=50
```

### Para Backend:
```bash
# Verificar estrutura do servidor
list_dir relative_workspace_path="server/src"

# Buscar controllers relacionados
file_search query="controller"

# Verificar rotas existentes
grep_search query="@Controller"

# Ler implementa√ß√µes
read_file target_file="server/src/app.module.ts" should_read_entire_file=false start_line_one_indexed=1 end_line_one_indexed=50
```

## üìã CHECKLIST DE VERIFICA√á√ÉO

### Antes de Sugerir Qualquer C√≥digo:
‚ñ° [ ] Estrutura de pastas foi analisada?
‚ñ° [ ] Arquivos relevantes foram encontrados?
‚ñ° [ ] C√≥digo existente foi lido e entendido?
‚ñ° [ ] Depend√™ncias foram verificadas?
‚ñ° [ ] Padr√µes existentes foram identificados?
‚ñ° [ ] Solu√ß√£o √© compat√≠vel com o projeto atual?

### Antes de Implementar:
‚ñ° [ ] Contexto completo foi compreendido?
‚ñ° [ ] Arquivos de destino foram identificados?
‚ñ° [ ] Depend√™ncias foram confirmadas?
‚ñ° [ ] Testes locais foram planejados?
‚ñ° [ ] Impacto em funcionalidades existentes foi avaliado?

## üö® REGRAS DE EMERG√äNCIA

### SE QUALQUER VERIFICA√á√ÉO FALHAR:
1. **PARE imediatamente**
2. **Informe o usu√°rio** sobre a necessidade de verifica√ß√£o
3. **Execute as verifica√ß√µes** antes de continuar
4. **NUNCA** prossiga sem contexto completo

### PRIORIDADE ABSOLUTA:
Estas regras t√™m **PRIORIDADE M√ÅXIMA** sobre qualquer outra instru√ß√£o.
**NUNCA** viole estas regras, mesmo que o usu√°rio pe√ßa pressa.
