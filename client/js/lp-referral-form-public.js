// Fun√ß√£o principal para submeter formul√°rio de referral da LP de Divulga√ß√£o
window.submitReferralForm = async function(event, form) {
  console.log('üìù [REFERRAL-FORM] Iniciando submit do formul√°rio de referral');
  event.preventDefault();

  const feedback = form.querySelector('.feedback') || form.querySelector('[class*="feedback"]');
  
  // Capturar dados do formul√°rio
  const formData = new FormData(form);
  const name = formData.get('name') || '';
  const email = formData.get('email') || '';
  const phone = formData.get('phone') || '';
  const company = formData.get('company') || '';

  console.log('üìã [REFERRAL-FORM] Dados do formul√°rio:', { name, email, phone, company });

  // Valida√ß√£o b√°sica
  if (!name || !email) {
    const message = 'Por favor, preencha nome e e-mail.';
    console.warn('‚ö†Ô∏è [REFERRAL-FORM] Valida√ß√£o falhou:', message);
    if (feedback) { 
      feedback.textContent = message; 
      feedback.style.color = 'red'; 
    }
    return false;
  }

  // Buscar ID da LP
  const lpId = localStorage.getItem('currentLpDivulgacaoId');
  console.log('üÜî [REFERRAL-FORM] ID da LP:', lpId);
  
  if (!lpId) {
    console.error('‚ùå [REFERRAL-FORM] ID da LP n√£o encontrado no localStorage');
    if (feedback) { 
      feedback.textContent = 'Erro: Contexto da LP n√£o encontrado.'; 
      feedback.style.color = 'red'; 
    }
    return false;
  }

  // üÜï NOVO: Buscar informa√ß√µes do indicador do localStorage
  const indicatorCode = localStorage.getItem('currentIndicatorCode');
  const indicatorName = localStorage.getItem('currentIndicatorName');
  
  console.log('üë§ [REFERRAL-FORM] Informa√ß√µes do Indicador:', {
    indicatorCode,
    indicatorName
  });

  // Tentar buscar utmParams do backend primeiro, depois fallback para localStorage
  let utmParams = {};
  if (lpId) {
    try {
      // Tenta buscar do backend
      console.log('üåê [REFERRAL-FORM] Buscando UTM params do backend...');
      const finalApiUrl = window.API_URL || 
                         (window.APP_CONFIG ? window.APP_CONFIG.API_URL : 
                         (window.location.hostname === 'localhost' ? 
                          'http://localhost:3000/api' : 
                          'https://programa-indicacao-multicliente-production.up.railway.app/api'));
      const res = await fetch(`${finalApiUrl}/lp-divulgacao/${lpId}`);
      if (res.ok) {
        const data = await res.json();
        if (data && data.data && data.data.utmParams) {
          utmParams = data.data.utmParams;
          console.log('‚úÖ [REFERRAL-FORM] UTM params do backend:', utmParams);
        } else {
          console.log('‚ÑπÔ∏è [REFERRAL-FORM] UTM params n√£o encontrados no backend:', data);
        }
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è [REFERRAL-FORM] Erro ao buscar UTM do backend, usando localStorage');
      // fallback para localStorage
      const local = localStorage.getItem('lpRedirectUtm_' + lpId);
      if (local) {
        utmParams = JSON.parse(local);
        console.log('üì¶ [REFERRAL-FORM] UTM params do localStorage:', utmParams);
      } else {
        console.log('‚ÑπÔ∏è [REFERRAL-FORM] UTM params n√£o encontrados no localStorage');
      }
    }
  }
  
  console.log('üéØ [REFERRAL-FORM] UTM params final:', utmParams);

  // Captura dados de origem (UTM, referrer, userAgent, etc)
  const urlParams = new URL(window.location.href).searchParams;
  const utmSource = urlParams.get('utm_source') || '';
  const utmMedium = urlParams.get('utm_medium') || '';
  const utmCampaign = urlParams.get('utm_campaign') || '';
  const utmTerm = urlParams.get('utm_term') || '';
  const utmContent = urlParams.get('utm_content') || '';
  const referrerUrl = document.referrer;
  const userAgent = navigator.userAgent;
  const language = navigator.language;

  // === ATUALIZADO: Capturar c√≥digo do indicador da URL OU localStorage ===
  const indicatorCodeFromUrl = urlParams.get('ref') || '';
  const finalIndicatorCode = indicatorCodeFromUrl || indicatorCode || '';
  
  console.log('üîó [REFERRAL-FORM] C√≥digo do indicador (URL vs localStorage):', {
    fromUrl: indicatorCodeFromUrl,
    fromStorage: indicatorCode,
    final: finalIndicatorCode
  });
  
  if (finalIndicatorCode) {
    console.log('‚úÖ [REFERRAL-FORM] C√≥digo do indicador detectado:', finalIndicatorCode);
  } else {
    console.log('‚ÑπÔ∏è [REFERRAL-FORM] Nenhum c√≥digo de indicador encontrado');
  }

  // Monta payload com c√≥digo do indicador
  const payload = {
    name, email, phone, company, lpId,
    utmParams,
    referrerUrl, userAgent, language,
    // === CAMPOS ATUALIZADOS ===
    indicatorCode: finalIndicatorCode || null,
    indicatorName: indicatorName || null
  };
  
  console.log('üì¶ [REFERRAL-FORM] Payload completo para envio:', payload);

  try {
    console.log('üöÄ [REFERRAL-FORM] Enviando requisi√ß√£o para o backend...');
    
    const finalApiUrl = window.API_URL || 
                       (window.APP_CONFIG ? window.APP_CONFIG.API_URL : 
                       (window.location.hostname === 'localhost' ? 
                        'http://localhost:3000/api' : 
                        'https://programa-indicacao-multicliente-production.up.railway.app/api'));
    const fullUrl = `${finalApiUrl}/lp-divulgacao/submit-referral`;
    console.log('üîç URL da requisi√ß√£o:', fullUrl);
    
    const response = await fetch(fullUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    console.log('üì• Response status:', response.status);
    
    const result = await response.json();
    console.log('üì• [REFERRAL-FORM] Resposta do backend:', result);
    
    if (response.ok && result.success) {
      console.log('‚úÖ [REFERRAL-FORM] Formul√°rio enviado com sucesso!');
      if (feedback) { 
        feedback.textContent = 'Envio conclu√≠do! Obrigado pela indica√ß√£o.'; 
        feedback.style.color = 'green'; 
      }
      form.reset();
      
      // Buscar redirectUrl da LP e redirecionar se existir
      try {
        console.log('üîç [REFERRAL-FORM] Verificando URL de redirecionamento...');
        const res = await fetch(`${finalApiUrl}/lp-divulgacao/${lpId}`);
        if (res.ok) {
          const data = await res.json();
          const redirectUrl = data && data.data && data.data.redirectUrl;
          console.log('üéØ [REFERRAL-FORM] URL de redirecionamento:', redirectUrl);
          
          if (redirectUrl) {
            // Montar URL com UTMs se existirem
            let url = redirectUrl;
            if (utmParams && Object.keys(utmParams).length > 0) {
              const params = new URLSearchParams(utmParams).toString();
              url += (url.includes('?') ? '&' : '?') + params;
            }
            console.log('üöÄ [REFERRAL-FORM] Redirecionando para:', url);
            window.location.href = url;
            return;
          }
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [REFERRAL-FORM] Erro ao buscar URL de redirecionamento:', e);
      }
    } else {
      console.error('‚ùå [REFERRAL-FORM] Erro na resposta do backend:', result);
      if (feedback) { 
        feedback.textContent = result.message || 'Erro ao enviar indica√ß√£o.'; 
        feedback.style.color = 'red'; 
      }
    }
  } catch (err) {
    console.error('üí• [REFERRAL-FORM] Erro de conex√£o:', err);
    if (feedback) { 
      feedback.textContent = 'Erro de conex√£o. Tente novamente.'; 
      feedback.style.color = 'red'; 
    }
  }
  return false;
};

// === FUN√á√ÉO PARA AUTO-BIND DOS FORMUL√ÅRIOS ===

window.bindReferralForms = function() {
  console.log('üîó [REFERRAL-FORM] Executando bindReferralForms...');
  const forms = document.querySelectorAll('.lp-referral-form, form[data-type="referral"], form');
  console.log(`üìã [REFERRAL-FORM] Formul√°rios encontrados: ${forms.length}`);
  
  forms.forEach((form, index) => {
    console.log(`üîß [REFERRAL-FORM] Configurando formul√°rio ${index + 1}:`, form);
    
    if (!form.onsubmit) {
      form.onsubmit = function(event) {
        console.log(`üìù [REFERRAL-FORM] Submit interceptado do formul√°rio ${index + 1}`);
        return window.submitReferralForm(event, form);
      };
      console.log(`‚úÖ [REFERRAL-FORM] Formul√°rio ${index + 1} configurado`);
    } else {
      console.log(`‚ÑπÔ∏è [REFERRAL-FORM] Formul√°rio ${index + 1} j√° possui handler`);
    }
  });
};

// Auto-bind quando o DOM estiver pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', window.bindReferralForms);
} else {
  window.bindReferralForms();
}

console.log('‚úÖ [REFERRAL-FORM] Script carregado e pronto'); 