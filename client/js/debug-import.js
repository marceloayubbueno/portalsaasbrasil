// üß™ DIAGN√ìSTICO ESPEC√çFICO: Bug de importa√ß√£o de listas

window.debugImportIssue = function() {
    console.log('üîç === DIAGN√ìSTICO ESPEC√çFICO DO BUG DE IMPORTA√á√ÉO ===');
    
    // 1. Verificar se as fun√ß√µes corrigidas existem
    console.log('1. üìã VERIFICA√á√ÉO DAS FUN√á√ïES:');
    console.log(`   - saveImportedParticipants: ${typeof saveImportedParticipants}`);
    console.log(`   - getSelectedListId: ${typeof getSelectedListId}`);
    console.log(`   - getCurrentListType: ${typeof getCurrentListType}`);
    
    // 2. Verificar listas atuais
    console.log('2. üìä LISTAS ATUAIS:');
    if (lists && lists.length > 0) {
        lists.forEach((list, index) => {
            console.log(`   Lista ${index + 1}:`);
            console.log(`     - Nome: "${list.name}"`);
            console.log(`     - ID: ${list._id || list.id}`);
            console.log(`     - Tipo: ${list.tipo || 'n√£o definido'}`);
            console.log(`     - Participantes: ${list.participants?.length || 0}`);
        });
    } else {
        console.log('   ‚ùå Nenhuma lista encontrada');
    }
    
    // 3. Verificar participantes atuais
    console.log('3. üë• PARTICIPANTES ATUAIS:');
    if (participants && participants.length > 0) {
        console.log(`   - Total: ${participants.length} participantes`);
        
        // Verificar quantos t√™m listas associadas
        const comListas = participants.filter(p => p.lists && p.lists.length > 0);
        const semListas = participants.filter(p => !p.lists || p.lists.length === 0);
        
        console.log(`   - Com listas: ${comListas.length}`);
        console.log(`   - Sem listas: ${semListas.length}`);
        
        if (semListas.length > 0) {
            console.log('   üö® PARTICIPANTES √ìRF√ÉOS (sem lista):');
            semListas.slice(0, 3).forEach(p => {
                console.log(`     - ${p.name} (${p.email})`);
            });
        }
    } else {
        console.log('   ‚ùå Nenhum participante encontrado');
    }
    
    // 4. Testar contexto atual
    console.log('4. üéØ TESTE DE CONTEXTO:');
    try {
        const listId = getSelectedListId();
        const tipo = getCurrentListType();
        console.log(`   - getSelectedListId(): ${listId || 'null'}`);
        console.log(`   - getCurrentListType(): ${tipo || 'null'}`);
    } catch (error) {
        console.log(`   ‚ùå Erro ao testar contexto: ${error.message}`);
    }
    
    console.log('‚úÖ === DIAGN√ìSTICO CONCLU√çDO ===');
    
    return {
        hasCorrections: typeof saveImportedParticipants === 'function',
        listsCount: lists?.length || 0,
        participantsCount: participants?.length || 0,
        orphanParticipants: participants?.filter(p => !p.lists || p.lists.length === 0).length || 0
    };
};

// Fun√ß√£o para simular corre√ß√£o manual
window.fixOrphanParticipants = async function() {
    console.log('üîß === CORRE√á√ÉO MANUAL DE PARTICIPANTES √ìRF√ÉOS ===');
    
    const orphans = participants.filter(p => !p.lists || p.lists.length === 0);
    
    if (orphans.length === 0) {
        console.log('‚úÖ Nenhum participante √≥rf√£o encontrado');
        return;
    }
    
    if (lists.length === 0) {
        console.log('‚ùå Nenhuma lista dispon√≠vel para associa√ß√£o');
        return;
    }
    
    // Pegar a lista mais recente
    const targetList = lists[lists.length - 1];
    console.log(`üéØ Associando ${orphans.length} participantes √† lista "${targetList.name}"`);
    
    try {
        const clientId = localStorage.getItem('clientId');
        const token = localStorage.getItem('clientToken');
        
        // Simular associa√ß√£o via API
        const response = await fetch(`${API_URL}/participant-lists/${targetList._id}/participants`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                participantIds: orphans.map(p => p._id)
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Participantes associados com sucesso!');
            // Recarregar dados
            loadLists(true);
            loadParticipants();
        } else {
            console.log('‚ùå Erro na associa√ß√£o:', response.status);
        }
        
    } catch (error) {
        console.log('‚ùå Erro na corre√ß√£o manual:', error.message);
    }
};

console.log('üß™ Diagn√≥stico de importa√ß√£o carregado:');
console.log('   - debugImportIssue() - verifica estado atual');
console.log('   - fixOrphanParticipants() - tenta corrigir √≥rf√£os');
