#!/usr/bin/env node

const { execSync } = require('child_process');

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function runCommandQuiet(command) {
  try {
    return execSync(command, { encoding: 'utf8' }).trim();
  } catch (error) {
    return null;
  }
}

function formatDate(dateString) {
  try {
    return new Date(dateString).toLocaleString('pt-BR');
  } catch {
    return dateString;
  }
}

function main() {
  log('\nüìä STATUS DO SISTEMA - PROGRAMA DE INDICA√á√ÉO', colors.bold + colors.blue);
  log('==============================================', colors.blue);

  try {
    // Status Git
    log('\nüìÇ STATUS DO REPOSIT√ìRIO:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);
    
    const currentBranch = runCommandQuiet('git branch --show-current');
    const lastCommit = runCommandQuiet('git log -1 --pretty=format:"%h - %s (%an, %ar)"');
    const status = runCommandQuiet('git status --porcelain');
    const remoteStatus = runCommandQuiet('git status -sb');

    log(`üåø Branch atual: ${currentBranch || 'N/A'}`, colors.green);
    log(`üìù √öltimo commit: ${lastCommit || 'N/A'}`, colors.reset);
    
    if (status) {
      log('‚ö†Ô∏è Altera√ß√µes pendentes:', colors.yellow);
      console.log(status);
    } else {
      log('‚úÖ Reposit√≥rio limpo', colors.green);
    }

    if (remoteStatus && remoteStatus.includes('ahead')) {
      log('üì§ H√° commits locais n√£o enviados', colors.yellow);
    } else if (remoteStatus && remoteStatus.includes('behind')) {
      log('üì• H√° commits remotos n√£o baixados', colors.yellow);
    } else {
      log('üîÑ Sincronizado com origin', colors.green);
    }

    // Informa√ß√µes dos ambientes
    log('\nüåê AMBIENTES DE DEPLOY:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);

    log('üöÇ Railway (Backend):', colors.yellow);
    log('  ‚Ä¢ Dashboard: https://railway.app/dashboard', colors.reset);
    log('  ‚Ä¢ Status: Verificar no dashboard', colors.reset);
    log('  ‚Ä¢ Deploy autom√°tico: Ativo', colors.green);

    log('\n‚ñ≤ Vercel (Frontend):', colors.yellow);
    log('  ‚Ä¢ Dashboard: https://vercel.com/dashboard', colors.reset);
    log('  ‚Ä¢ Status: Verificar no dashboard', colors.reset);
    log('  ‚Ä¢ Deploy autom√°tico: Ativo', colors.green);

    // Comandos dispon√≠veis
    log('\nüõ†Ô∏è COMANDOS DISPON√çVEIS:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);

    const commands = [
      { cmd: 'npm run dev', desc: 'Iniciar desenvolvimento local' },
      { cmd: 'npm run commit', desc: 'Commit interativo com padr√µes' },
      { cmd: 'npm run quick-commit "msg"', desc: 'Commit r√°pido' },
      { cmd: 'npm run deploy', desc: 'Deploy completo (build + push)' },
      { cmd: 'npm run redeploy', desc: 'Redeploy r√°pido (s√≥ trigger)' },
      { cmd: 'npm run status', desc: 'Este comando (status)' },
      { cmd: 'npm run test-prod', desc: 'Testar produ√ß√£o' },
      { cmd: 'npm run logs', desc: 'Links para logs' }
    ];

    commands.forEach(({ cmd, desc }) => {
      log(`  ${cmd.padEnd(25)} - ${desc}`, colors.reset);
    });

    // URLs importantes
    log('\nüîó LINKS IMPORTANTES:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);
    
    log('üìã Dashboards:', colors.yellow);
    log('  ‚Ä¢ Railway: https://railway.app/dashboard', colors.reset);
    log('  ‚Ä¢ Vercel: https://vercel.com/dashboard', colors.reset);
    log('  ‚Ä¢ GitHub: https://github.com/marceloayubbueno/programa-indicacao-multicliente', colors.reset);

    log('\nüåê Aplica√ß√µes:', colors.yellow);
    log('  ‚Ä¢ Frontend: https://programa-indicacao-multicliente.vercel.app/', colors.reset);
    log('  ‚Ä¢ Backend: https://programa-indicacao-multicliente-production.up.railway.app/api', colors.reset);
    log('  ‚Ä¢ Admin: https://programa-indicacao-multicliente.vercel.app/admin/pages/login.html', colors.reset);

    // √öltimas altera√ß√µes
    log('\nüìà √öLTIMOS COMMITS:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);
    
    const recentCommits = runCommandQuiet('git log -5 --pretty=format:"%h %s (%ar)"');
    if (recentCommits) {
      recentCommits.split('\n').forEach(commit => {
        log(`  ${commit}`, colors.reset);
      });
    }

    // Dicas
    log('\nüí° DICAS R√ÅPIDAS:', colors.cyan);
    log('‚îÄ'.repeat(30), colors.blue);
    log('‚Ä¢ Para mudan√ßas pequenas: npm run quick-commit "mensagem"', colors.yellow);
    log('‚Ä¢ Para mudan√ßas grandes: npm run commit (interativo)', colors.yellow);
    log('‚Ä¢ Para redeploy: npm run redeploy', colors.yellow);
    log('‚Ä¢ Para desenvolvimento: npm run dev', colors.yellow);

  } catch (error) {
    log(`\n‚ùå Erro ao obter status: ${error.message}`, colors.red);
  }
}

main(); 